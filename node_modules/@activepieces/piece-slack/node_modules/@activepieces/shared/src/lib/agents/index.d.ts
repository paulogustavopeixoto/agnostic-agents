import { Static } from '@sinclair/typebox';
export declare enum AgentOutputType {
    NO_OUTPUT = "no_output",
    STRUCTURED_OUTPUT = "structured_output"
}
export declare const agentbuiltInToolsNames: {
    markAsComplete: string;
};
export declare enum AgentOutputFieldType {
    TEXT = "text",
    NUMBER = "number",
    BOOLEAN = "boolean"
}
export declare const AgentOutputField: import("@sinclair/typebox").TObject<{
    displayName: import("@sinclair/typebox").TString;
    description: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    type: import("@sinclair/typebox").TEnum<typeof AgentOutputFieldType>;
}>;
export type AgentOutputField = Static<typeof AgentOutputField>;
export declare enum AgentTaskStatus {
    COMPLETED = "COMPLETED",
    FAILED = "FAILED"
}
export declare const AgentTestResult: import("@sinclair/typebox").TObject<{
    todoId: import("@sinclair/typebox").TString;
    status: import("@sinclair/typebox").TEnum<typeof AgentTaskStatus>;
    output: import("@sinclair/typebox").TUnknown;
}>;
export type AgentTestResult = Static<typeof AgentTestResult>;
export declare const Agent: import("@sinclair/typebox").TObject<{
    displayName: import("@sinclair/typebox").TString;
    description: import("@sinclair/typebox").TString;
    systemPrompt: import("@sinclair/typebox").TString;
    profilePictureUrl: import("@sinclair/typebox").TString;
    testPrompt: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    projectId: import("@sinclair/typebox").TString;
    maxSteps: import("@sinclair/typebox").TNumber;
    mcpId: import("@sinclair/typebox").TString;
    platformId: import("@sinclair/typebox").TString;
    taskCompleted: import("@sinclair/typebox").TNumber;
    outputType: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TEnum<typeof AgentOutputType>>;
    outputFields: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        displayName: import("@sinclair/typebox").TString;
        description: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        type: import("@sinclair/typebox").TEnum<typeof AgentOutputFieldType>;
    }>>>;
    id: import("@sinclair/typebox").TString;
    created: import("@sinclair/typebox").TString;
    updated: import("@sinclair/typebox").TString;
}>;
export type Agent = Static<typeof Agent>;
export declare const CreateAgentRequest: import("@sinclair/typebox").TObject<{
    displayName: import("@sinclair/typebox").TString;
    description: import("@sinclair/typebox").TString;
}>;
export type CreateAgentRequest = Static<typeof CreateAgentRequest>;
export declare const UpdateAgentRequest: import("@sinclair/typebox").TObject<{
    systemPrompt: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    displayName: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    description: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    testPrompt: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    outputType: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    outputFields: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        displayName: import("@sinclair/typebox").TString;
        description: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
        type: import("@sinclair/typebox").TEnum<typeof AgentOutputFieldType>;
    }>>>;
}>;
export type UpdateAgentRequest = Static<typeof UpdateAgentRequest>;
export declare const ListAgentsQueryParams: import("@sinclair/typebox").TObject<{
    limit: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
    cursor: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>;
export type ListAgentsQueryParams = Static<typeof ListAgentsQueryParams>;
export declare const RunAgentRequest: import("@sinclair/typebox").TObject<{
    prompt: import("@sinclair/typebox").TString;
    callbackUrl: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>;
export type RunAgentRequest = Static<typeof RunAgentRequest>;
