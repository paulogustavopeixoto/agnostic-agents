import { Static } from '@sinclair/typebox';
export declare enum McpToolType {
    PIECE = "PIECE",
    FLOW = "FLOW"
}
export declare const McpPieceToolData: import("@sinclair/typebox").TObject<{
    pieceName: import("@sinclair/typebox").TString;
    pieceVersion: import("@sinclair/typebox").TString;
    actionNames: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    logoUrl: import("@sinclair/typebox").TString;
    connectionExternalId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
}>;
export type McpPieceToolData = Static<typeof McpPieceToolData>;
export declare const McpTool: import("@sinclair/typebox").TObject<{
    type: import("@sinclair/typebox").TEnum<typeof McpToolType>;
    mcpId: import("@sinclair/typebox").TString;
    pieceMetadata: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        pieceName: import("@sinclair/typebox").TString;
        pieceVersion: import("@sinclair/typebox").TString;
        actionNames: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
        logoUrl: import("@sinclair/typebox").TString;
        connectionExternalId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    }>>;
    flowId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    flow: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        metadata: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<{
            [x: string]: unknown;
        } | null>>;
        externalId: import("@sinclair/typebox").TString;
        id: import("@sinclair/typebox").TString;
        created: import("@sinclair/typebox").TString;
        updated: import("@sinclair/typebox").TString;
        projectId: import("@sinclair/typebox").TString;
        status: import("@sinclair/typebox").TEnum<typeof import("../../flows").FlowStatus>;
        folderId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
        schedule: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<{
            failureCount?: number | undefined;
            type: import("../../flows").ScheduleType;
            cronExpression: string;
            timezone: string;
        } | null>>;
        handshakeConfiguration: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<{
            paramName?: string | undefined;
            strategy: import("../../flows").WebhookHandshakeStrategy;
        } | null>>;
        publishedVersionId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
        version: import("@sinclair/typebox").TObject<{
            flowId: import("@sinclair/typebox").TString;
            displayName: import("@sinclair/typebox").TString;
            trigger: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
                type: import("@sinclair/typebox").TLiteral<import("../../..").TriggerType.PIECE>;
                settings: import("@sinclair/typebox").TObject<{
                    pieceName: import("@sinclair/typebox").TString;
                    pieceVersion: import("@sinclair/typebox").TString;
                    pieceType: import("@sinclair/typebox").TEnum<typeof import("../../pieces").PieceType>;
                    packageType: import("@sinclair/typebox").TEnum<typeof import("../../pieces").PackageType>;
                    triggerName: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
                    input: import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString, import("@sinclair/typebox").TAny>;
                    inputUiInfo: import("@sinclair/typebox").TObject<{
                        sampleDataFileId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
                        sampleDataInputFileId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
                        lastTestDate: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
                        customizedInputs: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString, import("@sinclair/typebox").TUnknown>>;
                        schema: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TRecord<import("@sinclair/typebox").TString, import("@sinclair/typebox").TUnknown>>;
                        currentSelectedData: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnknown>;
                    }>;
                }>;
                name: import("@sinclair/typebox").TString;
                valid: import("@sinclair/typebox").TBoolean;
                displayName: import("@sinclair/typebox").TString;
                nextAction: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
            }>, import("@sinclair/typebox").TObject<{
                type: import("@sinclair/typebox").TLiteral<import("../../..").TriggerType.EMPTY>;
                settings: import("@sinclair/typebox").TAny;
                name: import("@sinclair/typebox").TString;
                valid: import("@sinclair/typebox").TBoolean;
                displayName: import("@sinclair/typebox").TString;
                nextAction: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TAny>;
            }>]>;
            updatedBy: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
            valid: import("@sinclair/typebox").TBoolean;
            schemaVersion: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
            state: import("@sinclair/typebox").TEnum<typeof import("../../..").FlowVersionState>;
            connectionIds: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
            id: import("@sinclair/typebox").TString;
            created: import("@sinclair/typebox").TString;
            updated: import("@sinclair/typebox").TString;
        }>;
    }>>;
    id: import("@sinclair/typebox").TString;
    created: import("@sinclair/typebox").TString;
    updated: import("@sinclair/typebox").TString;
}>;
export type McpTool = Static<typeof McpTool>;
