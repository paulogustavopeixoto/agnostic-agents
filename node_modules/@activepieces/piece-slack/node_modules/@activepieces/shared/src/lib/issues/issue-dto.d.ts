import { Static } from '@sinclair/typebox';
export declare enum IssueStatus {
    RESOLVED = "RESOLVED",
    UNRESOLVED = "UNRESOLVED",
    ARCHIVED = "ARCHIVED"
}
export declare const Issue: import("@sinclair/typebox").TObject<{
    projectId: import("@sinclair/typebox").TString;
    flowId: import("@sinclair/typebox").TString;
    status: import("@sinclair/typebox").TEnum<typeof IssueStatus>;
    stepName: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    lastOccurrence: import("@sinclair/typebox").TString;
    id: import("@sinclair/typebox").TString;
    created: import("@sinclair/typebox").TString;
    updated: import("@sinclair/typebox").TString;
}>;
export type Issue = Static<typeof Issue>;
export declare const PopulatedIssue: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString;
    created: import("@sinclair/typebox").TString;
    updated: import("@sinclair/typebox").TString;
    projectId: import("@sinclair/typebox").TString;
    status: import("@sinclair/typebox").TEnum<typeof IssueStatus>;
    flowId: import("@sinclair/typebox").TString;
    stepName: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    lastOccurrence: import("@sinclair/typebox").TString;
    flowDisplayName: import("@sinclair/typebox").TString;
    count: import("@sinclair/typebox").TNumber;
    step: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TObject<{
        stepName: import("@sinclair/typebox").TString;
        name: import("@sinclair/typebox").TString;
    }>>;
}>;
export type PopulatedIssue = Static<typeof PopulatedIssue>;
