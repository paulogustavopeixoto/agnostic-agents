"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAIProvider = createAIProvider;
const anthropic_1 = require("@ai-sdk/anthropic");
const google_1 = require("@ai-sdk/google");
const openai_1 = require("@ai-sdk/openai");
const replicate_1 = require("@ai-sdk/replicate");
const supported_ai_providers_1 = require("./supported-ai-providers");
function createAIProvider({ providerName, modelInstance, apiKey, baseURL, }) {
    const isImageModel = supported_ai_providers_1.SUPPORTED_AI_PROVIDERS
        .flatMap(provider => provider.imageModels)
        .some(model => model.instance.modelId === modelInstance.modelId);
    switch (providerName) {
        case 'openai': {
            const openaiVersion = 'v1';
            const provider = (0, openai_1.createOpenAI)({
                apiKey,
                baseURL: `${baseURL}/${openaiVersion}`,
            });
            if (isImageModel) {
                return provider.imageModel(modelInstance.modelId);
            }
            return provider(modelInstance.modelId);
        }
        case 'anthropic': {
            const anthropicVersion = 'v1';
            const provider = (0, anthropic_1.createAnthropic)({
                apiKey,
                baseURL: `${baseURL}/${anthropicVersion}`,
            });
            if (isImageModel) {
                throw new Error(`Provider ${providerName} does not support image models`);
            }
            return provider(modelInstance.modelId);
        }
        case 'replicate': {
            const replicateVersion = 'v1';
            const provider = (0, replicate_1.createReplicate)({
                apiToken: apiKey,
                baseURL: `${baseURL}/${replicateVersion}`,
            });
            if (!isImageModel) {
                throw new Error(`Provider ${providerName} does not support language models`);
            }
            return provider.imageModel(modelInstance.modelId);
        }
        case 'google': {
            const googleVersion = 'v1beta';
            const provider = (0, google_1.createGoogleGenerativeAI)({
                apiKey,
                baseURL: `${baseURL}/${googleVersion}`,
            });
            if (isImageModel) {
                throw new Error(`Provider ${providerName} does not support image models`);
            }
            return provider(modelInstance.modelId);
        }
        default:
            throw new Error(`Provider ${providerName} is not supported`);
    }
}
//# sourceMappingURL=ai-sdk.js.map