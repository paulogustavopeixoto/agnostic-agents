"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformBillingInformation = exports.PlatformWithoutSensitiveData = exports.Platform = exports.PlatformPlanLimits = exports.PlatformPlan = exports.PlatformUsage = exports.PlatformUsageMetric = exports.CopilotSettingsWithoutSensitiveData = exports.CopilotSettings = exports.AzureOpenAiProvider = exports.OpenAiProvider = exports.CopilotProviderType = exports.SMTPInformation = exports.FilteredPieceBehavior = void 0;
const typebox_1 = require("@sinclair/typebox");
const base_model_1 = require("../common/base-model");
const id_generator_1 = require("../common/id-generator");
const federated_authn_1 = require("../federated-authn");
var FilteredPieceBehavior;
(function (FilteredPieceBehavior) {
    FilteredPieceBehavior["ALLOWED"] = "ALLOWED";
    FilteredPieceBehavior["BLOCKED"] = "BLOCKED";
})(FilteredPieceBehavior || (exports.FilteredPieceBehavior = FilteredPieceBehavior = {}));
exports.SMTPInformation = typebox_1.Type.Object({
    user: typebox_1.Type.String(),
    senderEmail: typebox_1.Type.String(),
    senderName: typebox_1.Type.String(),
    password: typebox_1.Type.String(),
    host: typebox_1.Type.String(),
    port: typebox_1.Type.Number(),
});
var CopilotProviderType;
(function (CopilotProviderType) {
    CopilotProviderType["OPENAI"] = "openai";
    CopilotProviderType["AZURE_OPENAI"] = "azureOpenai";
})(CopilotProviderType || (exports.CopilotProviderType = CopilotProviderType = {}));
exports.OpenAiProvider = typebox_1.Type.Object({
    baseUrl: typebox_1.Type.String(),
    apiKey: typebox_1.Type.String(),
});
exports.AzureOpenAiProvider = typebox_1.Type.Object({
    resourceName: typebox_1.Type.String(),
    deploymentName: typebox_1.Type.String(),
    apiKey: typebox_1.Type.String(),
});
exports.CopilotSettings = typebox_1.Type.Object({
    providers: typebox_1.Type.Object({
        [CopilotProviderType.OPENAI]: typebox_1.Type.Optional(exports.OpenAiProvider),
        [CopilotProviderType.AZURE_OPENAI]: typebox_1.Type.Optional(exports.AzureOpenAiProvider),
    }),
});
exports.CopilotSettingsWithoutSensitiveData = typebox_1.Type.Object({
    providers: typebox_1.Type.Object({
        [CopilotProviderType.OPENAI]: typebox_1.Type.Optional(typebox_1.Type.Object({})),
        [CopilotProviderType.AZURE_OPENAI]: typebox_1.Type.Optional(typebox_1.Type.Object({})),
    }),
});
var PlatformUsageMetric;
(function (PlatformUsageMetric) {
    PlatformUsageMetric["TASKS"] = "tasks";
    PlatformUsageMetric["AI_TOKENS"] = "ai-tokens";
    PlatformUsageMetric["ACTIVE_FLOWS"] = "active-flows";
    PlatformUsageMetric["USER_SEATS"] = "user-seats";
    PlatformUsageMetric["PROJECTS"] = "projects";
    PlatformUsageMetric["TABLES"] = "tables";
})(PlatformUsageMetric || (exports.PlatformUsageMetric = PlatformUsageMetric = {}));
exports.PlatformUsage = typebox_1.Type.Object({
    tasks: typebox_1.Type.Number(),
    aiCredits: typebox_1.Type.Number(),
    activeFlows: typebox_1.Type.Number(),
    tables: typebox_1.Type.Number(),
    mcp: typebox_1.Type.Number(),
    seats: typebox_1.Type.Number(),
    projects: typebox_1.Type.Number(),
});
exports.PlatformPlan = typebox_1.Type.Object(Object.assign(Object.assign({}, base_model_1.BaseModelSchema), { platformId: typebox_1.Type.String(), includedTasks: typebox_1.Type.Number(), includedAiCredits: typebox_1.Type.Number(), tasksLimit: typebox_1.Type.Optional(typebox_1.Type.Number()), aiCreditsLimit: typebox_1.Type.Optional(typebox_1.Type.Number()), environmentsEnabled: typebox_1.Type.Boolean(), analyticsEnabled: typebox_1.Type.Boolean(), showPoweredBy: typebox_1.Type.Boolean(), auditLogEnabled: typebox_1.Type.Boolean(), embeddingEnabled: typebox_1.Type.Boolean(), managePiecesEnabled: typebox_1.Type.Boolean(), manageTemplatesEnabled: typebox_1.Type.Boolean(), customAppearanceEnabled: typebox_1.Type.Boolean(), manageProjectsEnabled: typebox_1.Type.Boolean(), projectRolesEnabled: typebox_1.Type.Boolean(), customDomainsEnabled: typebox_1.Type.Boolean(), globalConnectionsEnabled: typebox_1.Type.Boolean(), customRolesEnabled: typebox_1.Type.Boolean(), apiKeysEnabled: typebox_1.Type.Boolean(), tablesEnabled: typebox_1.Type.Boolean(), todosEnabled: typebox_1.Type.Boolean(), alertsEnabled: typebox_1.Type.Boolean(), ssoEnabled: typebox_1.Type.Boolean(), licenseKey: typebox_1.Type.Optional(typebox_1.Type.String()), licenseExpiresAt: typebox_1.Type.Optional(typebox_1.Type.String()), stripeCustomerId: typebox_1.Type.Optional(typebox_1.Type.String()), stripeSubscriptionId: typebox_1.Type.Optional(typebox_1.Type.String()), stripeSubscriptionStatus: typebox_1.Type.Optional(typebox_1.Type.String()), userSeatsLimit: typebox_1.Type.Optional(typebox_1.Type.Number()), projectsLimit: typebox_1.Type.Optional(typebox_1.Type.Number()), tablesLimit: typebox_1.Type.Optional(typebox_1.Type.Number()), mcpLimit: typebox_1.Type.Optional(typebox_1.Type.Number()), activeFlowsLimit: typebox_1.Type.Optional(typebox_1.Type.Number()), agentsLimit: typebox_1.Type.Optional(typebox_1.Type.Number()) }));
exports.PlatformPlanLimits = typebox_1.Type.Omit(exports.PlatformPlan, ['id', 'platformId', 'created', 'updated']);
exports.Platform = typebox_1.Type.Object(Object.assign(Object.assign({}, base_model_1.BaseModelSchema), { ownerId: id_generator_1.ApId, name: typebox_1.Type.String(), primaryColor: typebox_1.Type.String(), logoIconUrl: typebox_1.Type.String(), fullLogoUrl: typebox_1.Type.String(), favIconUrl: typebox_1.Type.String(), 
    /**
    * @deprecated Use projects filter instead.
    */
    filteredPieceNames: typebox_1.Type.Array(typebox_1.Type.String()), 
    /**
    * @deprecated Use projects filter instead.
    */
    filteredPieceBehavior: typebox_1.Type.Enum(FilteredPieceBehavior), smtp: (0, base_model_1.Nullable)(exports.SMTPInformation), cloudAuthEnabled: typebox_1.Type.Boolean(), enforceAllowedAuthDomains: typebox_1.Type.Boolean(), allowedAuthDomains: typebox_1.Type.Array(typebox_1.Type.String()), federatedAuthProviders: federated_authn_1.FederatedAuthnProviderConfig, emailAuthEnabled: typebox_1.Type.Boolean(), pinnedPieces: typebox_1.Type.Array(typebox_1.Type.String()), copilotSettings: typebox_1.Type.Optional(exports.CopilotSettings) }));
exports.PlatformWithoutSensitiveData = typebox_1.Type.Composite([typebox_1.Type.Object({
        federatedAuthProviders: (0, base_model_1.Nullable)(federated_authn_1.FederatedAuthnProviderConfigWithoutSensitiveData),
        copilotSettings: typebox_1.Type.Optional(exports.CopilotSettingsWithoutSensitiveData),
        smtp: (0, base_model_1.Nullable)(typebox_1.Type.Object({})),
        plan: exports.PlatformPlanLimits,
    }), typebox_1.Type.Pick(exports.Platform, [
        'id',
        'created',
        'updated',
        'ownerId',
        'name',
        'plan',
        'primaryColor',
        'logoIconUrl',
        'fullLogoUrl',
        'favIconUrl',
        'filteredPieceNames',
        'filteredPieceBehavior',
        'cloudAuthEnabled',
        'enforceAllowedAuthDomains',
        'allowedAuthDomains',
        'emailAuthEnabled',
        'pinnedPieces',
    ])]);
exports.PlatformBillingInformation = typebox_1.Type.Object({
    plan: exports.PlatformPlan,
    usage: exports.PlatformUsage,
    nextBillingDate: typebox_1.Type.String(),
});
//# sourceMappingURL=platform.model.js.map