import { Static } from '@sinclair/typebox';
export declare enum STATUS_VARIANT {
    POSITIVE = "Positive (Green)",
    NEGATIVE = "Negative (Red)",
    NEUTRAL = "Neutral (Gray)"
}
export declare const UNRESOLVED_STATUS: {
    name: string;
    description: string;
    variant: STATUS_VARIANT;
};
export declare const RESOLVED_STATUS: {
    name: string;
    description: string;
    variant: STATUS_VARIANT;
};
export declare const AGENT_RESOLVED_STATUS_OPTION: {
    name: string;
    description: string;
    variant: STATUS_VARIANT;
    continueFlow: boolean;
};
export declare const AGENT_REJECTED_STATUS_OPTION: {
    name: string;
    description: string;
    variant: STATUS_VARIANT;
    continueFlow: boolean;
};
export declare const AGENT_STATUS_OPTIONS: {
    name: string;
    description: string;
    variant: STATUS_VARIANT;
    continueFlow: boolean;
}[];
export declare const STATUS_COLORS: Record<STATUS_VARIANT, StatusColor>;
export type StatusColor = {
    color: string;
    textColor: string;
};
export declare const CreateAndWaitTodoResult: import("@sinclair/typebox").TObject<{
    status: import("@sinclair/typebox").TString;
}>;
export type CreateAndWaitTodoResult = Static<typeof CreateAndWaitTodoResult>;
export declare const CreateTodoResult: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString;
    links: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        name: import("@sinclair/typebox").TString;
        url: import("@sinclair/typebox").TString;
    }>>;
}>;
export type CreateTodoResult = Static<typeof CreateTodoResult>;
export declare const StatusOption: import("@sinclair/typebox").TObject<{
    name: import("@sinclair/typebox").TString;
    description: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    variant: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<STATUS_VARIANT.POSITIVE>, import("@sinclair/typebox").TLiteral<STATUS_VARIANT.NEGATIVE>, import("@sinclair/typebox").TLiteral<STATUS_VARIANT.NEUTRAL>]>;
    continueFlow: import("@sinclair/typebox").TBoolean;
}>;
export type StatusOption = Static<typeof StatusOption>;
export declare enum TodoEnvironment {
    TEST = "test",
    PRODUCTION = "production"
}
export declare const Todo: import("@sinclair/typebox").TObject<{
    title: import("@sinclair/typebox").TString;
    description: import("@sinclair/typebox").TString;
    status: import("@sinclair/typebox").TObject<{
        name: import("@sinclair/typebox").TString;
        description: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
        variant: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<STATUS_VARIANT.POSITIVE>, import("@sinclair/typebox").TLiteral<STATUS_VARIANT.NEGATIVE>, import("@sinclair/typebox").TLiteral<STATUS_VARIANT.NEUTRAL>]>;
        continueFlow: import("@sinclair/typebox").TBoolean;
    }>;
    createdByUserId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    statusOptions: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        name: import("@sinclair/typebox").TString;
        description: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
        variant: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<STATUS_VARIANT.POSITIVE>, import("@sinclair/typebox").TLiteral<STATUS_VARIANT.NEGATIVE>, import("@sinclair/typebox").TLiteral<STATUS_VARIANT.NEUTRAL>]>;
        continueFlow: import("@sinclair/typebox").TBoolean;
    }>>;
    platformId: import("@sinclair/typebox").TString;
    projectId: import("@sinclair/typebox").TString;
    flowId: import("@sinclair/typebox").TString;
    runId: import("@sinclair/typebox").TString;
    assigneeId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    locked: import("@sinclair/typebox").TBoolean;
    resolveUrl: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    agentId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    environment: import("@sinclair/typebox").TEnum<typeof TodoEnvironment>;
    id: import("@sinclair/typebox").TString;
    created: import("@sinclair/typebox").TString;
    updated: import("@sinclair/typebox").TString;
}>;
export type Todo = Static<typeof Todo>;
export declare const PopulatedTodo: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString;
    created: import("@sinclair/typebox").TString;
    updated: import("@sinclair/typebox").TString;
    platformId: import("@sinclair/typebox").TString;
    projectId: import("@sinclair/typebox").TString;
    status: import("@sinclair/typebox").TObject<{
        name: import("@sinclair/typebox").TString;
        description: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
        variant: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<STATUS_VARIANT.POSITIVE>, import("@sinclair/typebox").TLiteral<STATUS_VARIANT.NEGATIVE>, import("@sinclair/typebox").TLiteral<STATUS_VARIANT.NEUTRAL>]>;
        continueFlow: import("@sinclair/typebox").TBoolean;
    }>;
    agentId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    flowId: import("@sinclair/typebox").TString;
    title: import("@sinclair/typebox").TString;
    description: import("@sinclair/typebox").TString;
    runId: import("@sinclair/typebox").TString;
    environment: import("@sinclair/typebox").TEnum<typeof TodoEnvironment>;
    createdByUserId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    statusOptions: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TObject<{
        name: import("@sinclair/typebox").TString;
        description: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
        variant: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TLiteral<STATUS_VARIANT.POSITIVE>, import("@sinclair/typebox").TLiteral<STATUS_VARIANT.NEGATIVE>, import("@sinclair/typebox").TLiteral<STATUS_VARIANT.NEUTRAL>]>;
        continueFlow: import("@sinclair/typebox").TBoolean;
    }>>;
    assigneeId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    locked: import("@sinclair/typebox").TBoolean;
    resolveUrl: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    flow: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<{
        metadata?: {
            [x: string]: unknown;
        } | null | undefined;
        folderId?: string | null | undefined;
        schedule?: {
            failureCount?: number | undefined;
            type: import("../flows").ScheduleType;
            cronExpression: string;
            timezone: string;
        } | null | undefined;
        handshakeConfiguration?: {
            paramName?: string | undefined;
            strategy: import("../flows").WebhookHandshakeStrategy;
        } | null | undefined;
        publishedVersionId?: string | null | undefined;
        id: string;
        version: {
            updatedBy?: string | null | undefined;
            schemaVersion?: string | null | undefined;
            id: string;
            flowId: string;
            created: string;
            updated: string;
            displayName: string;
            valid: boolean;
            trigger: {
                nextAction?: any;
                type: import("../..").TriggerType.EMPTY;
                name: string;
                displayName: string;
                settings: any;
                valid: boolean;
            } | {
                nextAction?: any;
                type: import("../..").TriggerType.PIECE;
                name: string;
                displayName: string;
                settings: {
                    triggerName?: string | undefined;
                    packageType: import("../pieces").PackageType;
                    pieceType: import("../pieces").PieceType;
                    pieceName: string;
                    pieceVersion: string;
                    input: {
                        [x: string]: any;
                    };
                    inputUiInfo: {
                        sampleDataFileId?: string | undefined;
                        sampleDataInputFileId?: string | undefined;
                        lastTestDate?: string | undefined;
                        customizedInputs?: {
                            [x: string]: unknown;
                        } | undefined;
                        schema?: {
                            [x: string]: unknown;
                        } | undefined;
                        currentSelectedData?: unknown;
                    };
                };
                valid: boolean;
            };
            state: import("../..").FlowVersionState;
            connectionIds: string[];
        };
        projectId: string;
        created: string;
        updated: string;
        status: import("../flows").FlowStatus;
        externalId: string;
    } | null>>;
    assignee: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<{
        platformId?: string | null | undefined;
        externalId?: string | null | undefined;
        lastChangelogDismissed?: string | null | undefined;
        id: string;
        created: string;
        updated: string;
        email: string;
        platformRole: import("../user").PlatformRole;
        status: import("../user").UserStatus;
        firstName: string;
        lastName: string;
    } | null>>;
    createdByUser: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<{
        platformId?: string | null | undefined;
        externalId?: string | null | undefined;
        lastChangelogDismissed?: string | null | undefined;
        id: string;
        created: string;
        updated: string;
        email: string;
        platformRole: import("../user").PlatformRole;
        status: import("../user").UserStatus;
        firstName: string;
        lastName: string;
    } | null>>;
    agent: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<{
        testPrompt?: string | undefined;
        outputType?: import("../agents").AgentOutputType | undefined;
        outputFields?: {
            description?: string | undefined;
            type: import("../agents").AgentOutputFieldType;
            displayName: string;
        }[] | undefined;
        id: string;
        projectId: string;
        platformId: string;
        created: string;
        updated: string;
        displayName: string;
        description: string;
        mcpId: string;
        systemPrompt: string;
        profilePictureUrl: string;
        maxSteps: number;
        taskCompleted: number;
    } | null>>;
}>;
export type PopulatedTodo = Static<typeof PopulatedTodo>;
export declare enum TodoType {
    INTERNAL = "internal",
    EXTERNAL = "external"
}
export declare const TodoActivity: import("@sinclair/typebox").TObject<{
    todoId: import("@sinclair/typebox").TString;
    userId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    agentId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    content: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
        type: import("@sinclair/typebox").TLiteral<import("./content").ContentBlockType.MARKDOWN>;
        markdown: import("@sinclair/typebox").TString;
    }>, import("@sinclair/typebox").TObject<{
        type: import("@sinclair/typebox").TLiteral<import("./content").ContentBlockType.TOOL_CALL>;
        displayName: import("@sinclair/typebox").TString;
        name: import("@sinclair/typebox").TString;
        toolCallType: import("@sinclair/typebox").TEnum<typeof import("./content").ToolCallType>;
        logoUrl: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
        status: import("@sinclair/typebox").TEnum<typeof import("./content").ToolCallStatus>;
        input: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<unknown>>;
        output: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<unknown>>;
        startTime: import("@sinclair/typebox").TString;
        endTime: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    }>]>>;
    id: import("@sinclair/typebox").TString;
    created: import("@sinclair/typebox").TString;
    updated: import("@sinclair/typebox").TString;
}>;
export type TodoActivity = Static<typeof TodoActivity>;
export declare const TodoActivityWithUser: import("@sinclair/typebox").TObject<{
    id: import("@sinclair/typebox").TString;
    created: import("@sinclair/typebox").TString;
    updated: import("@sinclair/typebox").TString;
    agentId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    userId: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    todoId: import("@sinclair/typebox").TString;
    content: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
        type: import("@sinclair/typebox").TLiteral<import("./content").ContentBlockType.MARKDOWN>;
        markdown: import("@sinclair/typebox").TString;
    }>, import("@sinclair/typebox").TObject<{
        type: import("@sinclair/typebox").TLiteral<import("./content").ContentBlockType.TOOL_CALL>;
        displayName: import("@sinclair/typebox").TString;
        name: import("@sinclair/typebox").TString;
        toolCallType: import("@sinclair/typebox").TEnum<typeof import("./content").ToolCallType>;
        logoUrl: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
        status: import("@sinclair/typebox").TEnum<typeof import("./content").ToolCallStatus>;
        input: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<unknown>>;
        output: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<unknown>>;
        startTime: import("@sinclair/typebox").TString;
        endTime: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString>;
    }>]>>;
    agent: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<{
        testPrompt?: string | undefined;
        outputType?: import("../agents").AgentOutputType | undefined;
        outputFields?: {
            description?: string | undefined;
            type: import("../agents").AgentOutputFieldType;
            displayName: string;
        }[] | undefined;
        id: string;
        projectId: string;
        platformId: string;
        created: string;
        updated: string;
        displayName: string;
        description: string;
        mcpId: string;
        systemPrompt: string;
        profilePictureUrl: string;
        maxSteps: number;
        taskCompleted: number;
    } | null>>;
    user: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<{
        platformId?: string | null | undefined;
        externalId?: string | null | undefined;
        lastChangelogDismissed?: string | null | undefined;
        id: string;
        created: string;
        updated: string;
        email: string;
        platformRole: import("../user").PlatformRole;
        status: import("../user").UserStatus;
        firstName: string;
        lastName: string;
    } | null>>;
}>;
export type TodoActivityWithUser = Static<typeof TodoActivityWithUser>;
