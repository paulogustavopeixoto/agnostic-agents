"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.McpRun = exports.McpFlowRunMetadata = exports.McpPieceRunMetadata = exports.McpRunStatus = void 0;
const typebox_1 = require("@sinclair/typebox");
const common_1 = require("../../../common");
const id_generator_1 = require("../../../common/id-generator");
var McpRunStatus;
(function (McpRunStatus) {
    McpRunStatus["SUCCESS"] = "Success";
    McpRunStatus["FAILED"] = "Failed";
})(McpRunStatus || (exports.McpRunStatus = McpRunStatus = {}));
exports.McpPieceRunMetadata = typebox_1.Type.Object({
    pieceName: typebox_1.Type.String(),
    pieceVersion: typebox_1.Type.String(),
    actionName: typebox_1.Type.String(),
});
exports.McpFlowRunMetadata = typebox_1.Type.Object({
    flowId: id_generator_1.ApId,
    flowVersionId: id_generator_1.ApId,
    name: typebox_1.Type.String(),
});
exports.McpRun = typebox_1.Type.Object(Object.assign(Object.assign({}, common_1.BaseModelSchema), { mcpId: id_generator_1.ApId, projectId: id_generator_1.ApId, toolId: id_generator_1.ApId, metadata: typebox_1.Type.Union([exports.McpPieceRunMetadata, exports.McpFlowRunMetadata]), input: typebox_1.Type.Any(), output: typebox_1.Type.Any(), status: typebox_1.Type.Enum(McpRunStatus) }));
//# sourceMappingURL=mcp-run.js.map