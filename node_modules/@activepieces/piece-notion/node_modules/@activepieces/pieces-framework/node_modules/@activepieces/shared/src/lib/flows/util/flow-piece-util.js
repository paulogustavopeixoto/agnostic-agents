"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.flowPieceUtil = void 0;
const tslib_1 = require("tslib");
const semver_1 = tslib_1.__importDefault(require("semver"));
const action_1 = require("../actions/action");
const trigger_1 = require("../triggers/trigger");
const flow_structure_util_1 = require("./flow-structure-util");
function upgradeStep(step, stepName) {
    if (step.name !== stepName) {
        return step;
    }
    const clonedStep = JSON.parse(JSON.stringify(step));
    switch (step.type) {
        case action_1.ActionType.PIECE:
        case trigger_1.TriggerType.PIECE: {
            const { pieceVersion } = step.settings;
            if (pieceVersion.startsWith('^') || pieceVersion.startsWith('~')) {
                return step;
            }
            if (semver_1.default.valid(pieceVersion) && semver_1.default.lt(pieceVersion, '1.0.0')) {
                clonedStep.settings.pieceVersion = `~${pieceVersion}`;
            }
            else {
                clonedStep.settings.pieceVersion = `^${pieceVersion}`;
            }
            break;
        }
        default:
            break;
    }
    return clonedStep;
}
function getUsedPieces(trigger) {
    return flow_structure_util_1.flowStructureUtil.getAllSteps(trigger)
        .filter((step) => step.type === action_1.ActionType.PIECE || step.type === trigger_1.TriggerType.PIECE)
        .map((step) => step.settings.pieceName);
}
exports.flowPieceUtil = {
    makeFlowAutoUpgradable(flowVersion) {
        return flow_structure_util_1.flowStructureUtil.transferFlow(flowVersion, (step) => upgradeStep(step, step.name));
    },
    getUsedPieces,
};
//# sourceMappingURL=flow-piece-util.js.map