import { Static } from '@sinclair/typebox';
export declare enum ProjectReleaseType {
    GIT = "GIT",
    PROJECT = "PROJECT",
    ROLLBACK = "ROLLBACK"
}
export declare const CreateProjectReleaseFromGitRequestBody: import("@sinclair/typebox").TObject<{
    name: import("@sinclair/typebox").TString;
    description: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    selectedFlowsIds: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    type: import("@sinclair/typebox").TLiteral<ProjectReleaseType.GIT>;
    repoId: import("@sinclair/typebox").TString;
}>;
export declare const CreateProjectReleaseFromRollbackRequestBody: import("@sinclair/typebox").TObject<{
    name: import("@sinclair/typebox").TString;
    description: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    selectedFlowsIds: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    type: import("@sinclair/typebox").TLiteral<ProjectReleaseType.ROLLBACK>;
    projectReleaseId: import("@sinclair/typebox").TString;
}>;
export declare const CreateProjectReleaseFromProjectRequestBody: import("@sinclair/typebox").TObject<{
    name: import("@sinclair/typebox").TString;
    description: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    selectedFlowsIds: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    type: import("@sinclair/typebox").TLiteral<ProjectReleaseType.PROJECT>;
    targetProjectId: import("@sinclair/typebox").TString;
}>;
export declare const CreateProjectReleaseRequestBody: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
    name: import("@sinclair/typebox").TString;
    description: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    selectedFlowsIds: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    type: import("@sinclair/typebox").TLiteral<ProjectReleaseType.GIT>;
    repoId: import("@sinclair/typebox").TString;
}>, import("@sinclair/typebox").TObject<{
    name: import("@sinclair/typebox").TString;
    description: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    selectedFlowsIds: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    type: import("@sinclair/typebox").TLiteral<ProjectReleaseType.ROLLBACK>;
    projectReleaseId: import("@sinclair/typebox").TString;
}>, import("@sinclair/typebox").TObject<{
    name: import("@sinclair/typebox").TString;
    description: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    selectedFlowsIds: import("@sinclair/typebox").TArray<import("@sinclair/typebox").TString>;
    type: import("@sinclair/typebox").TLiteral<ProjectReleaseType.PROJECT>;
    targetProjectId: import("@sinclair/typebox").TString;
}>]>;
export type CreateProjectReleaseRequestBody = Static<typeof CreateProjectReleaseRequestBody>;
export declare const DiffReleaseRequest: import("@sinclair/typebox").TUnion<[import("@sinclair/typebox").TObject<{
    type: import("@sinclair/typebox").TLiteral<ProjectReleaseType.PROJECT>;
    targetProjectId: import("@sinclair/typebox").TString;
}>, import("@sinclair/typebox").TObject<{
    type: import("@sinclair/typebox").TLiteral<ProjectReleaseType.ROLLBACK>;
    projectReleaseId: import("@sinclair/typebox").TString;
}>, import("@sinclair/typebox").TObject<{
    type: import("@sinclair/typebox").TLiteral<ProjectReleaseType.GIT>;
}>]>;
export type DiffReleaseRequest = Static<typeof DiffReleaseRequest>;
export declare const ListProjectReleasesRequest: import("@sinclair/typebox").TObject<{
    cursor: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TUnsafe<string | null>>;
    limit: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TNumber>;
}>;
export type ListProjectReleasesRequest = Static<typeof ListProjectReleasesRequest>;
