import { ApFile, ServerContext } from '@activepieces/pieces-framework';
import { AiProvider } from './providers';
export type AI = {
    provider: string;
    chat: AIChat;
    image?: AIImage;
    moderation?: AIModeration;
    function?: AIFunction;
};
export type AIFunction = {
    call?: (params: AIChatCompletionsCreateParams & {
        functions: AIFunctionDefinition[];
    } & {
        image: ApFile;
    }) => Promise<AIChatCompletion & {
        call: AIFunctionCall | null;
    }>;
};
export type AIModeration = {
    create: (params: AIModerationCreateParams) => Promise<any | null>;
};
export type AIModerationCreateParams = {
    model: string;
    text?: string;
    images?: ApFile[];
    maxTokens?: number;
};
export type AIImage = {
    generate: (params: AIImageGenerateParams) => Promise<AIImageCompletion | null>;
};
export type AIImageGenerateParams = {
    prompt: string;
    model: string;
    size?: string;
    advancedOptions?: Record<string, unknown>;
};
export type AIImageCompletion = {
    image: string;
};
export type AIChat = {
    text: (params: AIChatCompletionsCreateParams) => Promise<AIChatCompletion>;
};
export type AIChatCompletionsCreateParams = {
    model: string;
    messages: AIChatMessage[];
    creativity?: number;
    maxTokens?: number;
    stop?: string[];
};
export type AIChatCompletion = {
    choices: AIChatMessage[];
    usage?: AIChatCompletionUsage;
};
export type AIChatCompletionUsage = {
    promptTokens: number;
    completionTokens: number;
    totalTokens: number;
};
export type AIChatMessage = {
    role: AIChatRole;
    content: string;
};
export type AIFunctionCall = {
    id: string;
    function: {
        name: string;
        arguments: unknown;
    };
};
export type AIFunctionDefinition = {
    name: string;
    description: string;
    arguments: AIFunctionArgumentDefinition;
};
export type AIFunctionArgumentDefinition = {
    type: 'object';
    properties?: unknown | null;
    required?: string[];
    [k: string]: unknown;
};
export declare enum AIChatRole {
    SYSTEM = "system",
    USER = "user",
    ASSISTANT = "assistant"
}
export type AIFactory = (params: {
    proxyUrl: string;
    engineToken: string;
}) => AI;
export declare const AI: ({ provider, server, }: {
    provider: AiProvider;
    server: ServerContext;
}) => AI;
export * from './providers';
