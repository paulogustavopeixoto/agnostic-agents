"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AiProvider = exports.aiProps = exports.AI_PROVIDERS = exports.AI_PROVIDERS_MAKRDOWN = void 0;
const tslib_1 = require("tslib");
const pieces_framework_1 = require("@activepieces/pieces-framework");
const shared_1 = require("@activepieces/shared");
const typebox_1 = require("@sinclair/typebox");
const http_1 = require("../../http");
const anthropic_1 = require("./anthropic");
const openai_1 = require("./openai");
const replicate_1 = require("./replicate");
const utils_1 = require("./utils");
exports.AI_PROVIDERS_MAKRDOWN = {
    openai: `Follow these instructions to get your OpenAI API Key:

1. Visit the following website: https://platform.openai.com/account/api-keys.
2. Once on the website, locate and click on the option to obtain your OpenAI API Key.

It is strongly recommended that you add your credit card information to your OpenAI account and upgrade to the paid plan **before** generating the API Key. This will help you prevent 429 errors.
`,
    anthropic: `Follow these instructions to get your Claude API Key:

1. Visit the following website: https://console.anthropic.com/settings/keys.
2. Once on the website, locate and click on the option to obtain your Claude API Key.
`,
    replicate: `Follow these instructions to get your Replicate API Key:

1. Visit the following website: https://replicate.com/account/api-tokens.
2. Once on the website, locate and click on the option to obtain your Replicate API Key.
`,
};
exports.AI_PROVIDERS = [
    {
        logoUrl: 'https://cdn.activepieces.com/pieces/openai.png',
        defaultBaseUrl: 'https://api.openai.com',
        label: 'OpenAI',
        value: 'openai',
        models: openai_1.openaiModels,
        auth: (0, utils_1.authHeader)({ bearer: true }),
        factory: openai_1.openai,
        instructionsMarkdown: exports.AI_PROVIDERS_MAKRDOWN.openai,
    },
    {
        logoUrl: 'https://cdn.activepieces.com/pieces/claude.png',
        defaultBaseUrl: 'https://api.anthropic.com',
        label: 'Anthropic',
        value: 'anthropic',
        models: [
            (0, utils_1.model)({
                label: 'claude-3-5-sonnet',
                value: 'claude-3-5-sonnet-latest',
                supported: ['text', 'function'],
            }),
            (0, utils_1.model)({
                label: 'claude-3-opus',
                value: 'claude-3-opus-20240229',
                supported: ['text', 'function'],
            }),
            (0, utils_1.model)({
                label: 'claude-3-sonnet',
                value: 'claude-3-sonnet-20240229',
                supported: ['text', 'function'],
            }),
            (0, utils_1.model)({
                label: 'claude-3-5-haiku',
                value: 'claude-3-5-haiku-latest',
                supported: ['text', 'function'],
            }),
            (0, utils_1.model)({
                label: 'claude-3-haiku',
                value: 'claude-3-haiku-20240307',
                supported: ['text', 'function'],
            }),
        ],
        auth: (0, utils_1.authHeader)({ name: 'x-api-key', bearer: false }),
        factory: anthropic_1.anthropic,
        instructionsMarkdown: exports.AI_PROVIDERS_MAKRDOWN.anthropic,
    },
    {
        logoUrl: 'https://cdn.activepieces.com/pieces/replicate.png',
        defaultBaseUrl: 'https://api.replicate.com',
        label: 'Replicate',
        value: 'replicate',
        models: replicate_1.replicateModels,
        auth: (0, utils_1.authHeader)({ bearer: true }),
        factory: replicate_1.replicate,
        instructionsMarkdown: exports.AI_PROVIDERS_MAKRDOWN.replicate,
    },
];
const aiProps = (supported) => ({
    provider: pieces_framework_1.Property.Dropdown({
        displayName: 'Provider',
        required: true,
        defaultValue: 'openai',
        refreshers: [],
        options: (_, ctx) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const providers = yield http_1.httpClient.sendRequest({
                method: http_1.HttpMethod.GET,
                url: `${ctx.server.apiUrl}v1/ai-providers`,
                headers: {
                    Authorization: `Bearer ${ctx.server.token}`,
                },
            });
            if (providers.body.data.length === 0) {
                return {
                    disabled: true,
                    options: [],
                    placeholder: 'No AI providers configured by the admin.',
                };
            }
            const providersWithMetadata = providers.body.data.flatMap((p) => {
                const providerMetadata = exports.AI_PROVIDERS.find((meta) => meta.value === p.provider &&
                    meta.models.some((m) => m.supported.includes(supported)));
                if ((0, shared_1.isNil)(providerMetadata)) {
                    return [];
                }
                return [
                    {
                        value: providerMetadata.value,
                        label: providerMetadata.label,
                        models: providerMetadata.models,
                    },
                ];
            });
            return {
                placeholder: 'Select AI Provider',
                disabled: false,
                options: providersWithMetadata,
            };
        }),
    }),
    model: pieces_framework_1.Property.Dropdown({
        displayName: 'Model',
        required: true,
        defaultValue: 'gpt-4o',
        refreshers: ['provider'],
        options: (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ provider }) {
            var _b;
            if ((0, shared_1.isNil)(provider)) {
                return {
                    disabled: true,
                    options: [],
                    placeholder: 'Select AI Provider',
                };
            }
            const models = (_b = exports.AI_PROVIDERS.find((p) => p.value === provider)) === null || _b === void 0 ? void 0 : _b.models.filter((m) => m.supported.includes(supported));
            return {
                disabled: (0, shared_1.isNil)(models),
                options: models !== null && models !== void 0 ? models : [],
            };
        }),
    }),
    advancedOptions: pieces_framework_1.Property.DynamicProperties({
        displayName: 'Advanced Options',
        required: false,
        refreshers: ['provider', 'model'],
        props: (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ model, provider }) {
            var _b, _c;
            const modelMetadata = (_b = exports.AI_PROVIDERS.find((p) => p.value === provider)) === null || _b === void 0 ? void 0 : _b.models.find((m) => m.value === model);
            if ((0, shared_1.isNil)(modelMetadata) || !(0, utils_1.hasMapper)(modelMetadata)) {
                return {};
            }
            return (_c = modelMetadata.mapper.advancedOptions) !== null && _c !== void 0 ? _c : {};
        }),
    }),
});
exports.aiProps = aiProps;
exports.AiProvider = typebox_1.Type.Union(exports.AI_PROVIDERS.map((p) => typebox_1.Type.Literal(p.value)));
tslib_1.__exportStar(require("./utils"), exports);
//# sourceMappingURL=index.js.map