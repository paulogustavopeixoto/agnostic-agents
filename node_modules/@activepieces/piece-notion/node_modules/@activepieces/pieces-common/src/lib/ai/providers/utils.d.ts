import { DynamicProp } from '@activepieces/pieces-framework';
import { AIChatCompletion, AIChatCompletionsCreateParams, AIImageCompletion, AIImageGenerateParams } from '../index';
export declare function authHeader(options: AuthHeaderOptions): AuthHeader;
export type HeaderValueMapper = (value: string) => string;
export type AuthHeader = {
    name: string;
    mapper: HeaderValueMapper;
};
type AuthHeaderOptions = {
    bearer: true;
} | {
    bearer: false;
    name: string;
    mapper?: HeaderValueMapper;
};
export type ModelParameterValue = string | number | boolean;
export type Model = ReturnType<typeof model> | ReturnType<ReturnType<typeof model>['mapper']>;
export declare enum ModelType {
    IMAGE = "image",
    CHAT = "chat",
    NO_MAPPER = "no-mapper"
}
export declare function model(options: {
    label: string;
    value: string;
    supported: Array<'text' | 'image' | 'function' | 'moderation'>;
}): {
    __tag: ModelType;
    label: string;
    value: string;
    supported: ("function" | "text" | "image" | "moderation")[];
    mapper: (mapper: ImageModelMapper | ChatModelMapper) => {
        mapper: ImageModelMapper | ChatModelMapper;
        __tag: ModelType.IMAGE | ModelType.CHAT;
        label: string;
        value: string;
        supported: ("function" | "text" | "image" | "moderation")[];
    };
};
export type ModelMapper<T extends ModelType> = T extends ModelType.IMAGE ? ImageModelMapper : T extends ModelType.CHAT ? ChatModelMapper : never;
export interface ImageModelMapper {
    __tag: ModelType.IMAGE;
    encodeInput: (input: AIImageGenerateParams) => Promise<object>;
    decodeOutput: (output: object) => Promise<AIImageCompletion | null>;
    advancedOptions?: Record<string, DynamicProp>;
}
export interface ChatModelMapper {
    __tag: ModelType.CHAT;
    encodeInput: (input: AIChatCompletionsCreateParams) => Promise<object>;
    decodeOutput: (output: object) => Promise<AIChatCompletion>;
    advancedOptions?: Record<string, DynamicProp>;
}
export declare function imageMapper(mapper: Omit<ImageModelMapper, '__tag'>): ImageModelMapper;
export declare function chatMapper(mapper: Omit<ChatModelMapper, '__tag'>): ChatModelMapper;
export declare const hasMapper: (m: Model) => m is Model & {
    mapper: ModelMapper<ModelType>;
};
export {};
