"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPageOrBlockChildren = void 0;
const tslib_1 = require("tslib");
const pieces_framework_1 = require("@activepieces/pieces-framework");
const notion_to_md_1 = require("notion-to-md");
const __1 = require("../..");
const client_1 = require("@notionhq/client");
exports.getPageOrBlockChildren = (0, pieces_framework_1.createAction)({
    auth: __1.notionAuth,
    name: 'getPageOrBlockChildren',
    displayName: 'Get block content',
    description: 'Retrieve the actual content of a page (represented by blocks).',
    props: {
        parentId: pieces_framework_1.Property.ShortText({
            displayName: 'Page or parent block ID',
            required: true,
        }),
        markdown: pieces_framework_1.Property.Checkbox({
            displayName: 'Markdown',
            description: 'Convert Notion JSON blocks to Markdown',
            required: true,
            defaultValue: false,
        }),
        dynamic: pieces_framework_1.Property.DynamicProperties({
            displayName: 'Dynamic properties',
            refreshers: ['markdown'],
            required: true,
            props: (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ markdown }) {
                if (markdown) {
                    return {};
                }
                const fields = {
                    depth: pieces_framework_1.Property.Number({
                        displayName: 'Depth',
                        description: 'Recursively retrieve children up to this depth',
                        required: true,
                        defaultValue: 1,
                    }),
                };
                return fields;
            }),
        }),
    },
    run(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const notion = new client_1.Client({
                auth: context.auth.access_token,
                notionVersion: '2022-02-22',
            });
            if (context.propsValue.markdown) {
                const n2m = new notion_to_md_1.NotionToMarkdown({
                    notionClient: notion,
                    config: { parseChildPages: false },
                });
                return n2m.toMarkdownString(yield n2m.pageToMarkdown(context.propsValue.parentId)).parent;
            }
            else {
                return getBlockChildrenRecursively(notion, context.propsValue.parentId, context.propsValue.dynamic['depth'], 0);
            }
        });
    },
});
function getBlockChildrenRecursively(notion_1, blockId_1, depth_1) {
    return tslib_1.__awaiter(this, arguments, void 0, function* (notion, blockId, depth, currentDepth = 0) {
        if (currentDepth >= depth) {
            return [];
        }
        // Retrieve the block's children
        const children = yield (0, client_1.collectPaginatedAPI)(notion.blocks.children.list, {
            block_id: blockId,
        });
        // Recursively retrieve children of each child block
        for (const child of children) {
            if (!(0, client_1.isFullBlock)(child) || !child.has_children) {
                continue;
            }
            const childChildren = yield getBlockChildrenRecursively(notion, child.id, depth, currentDepth + 1);
            child.children = childChildren;
        }
        return children;
    });
}
//# sourceMappingURL=get-page-or-block-children.js.map