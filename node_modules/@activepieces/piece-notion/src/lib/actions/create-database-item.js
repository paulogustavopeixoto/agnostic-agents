"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDatabaseItem = void 0;
const tslib_1 = require("tslib");
const pieces_framework_1 = require("@activepieces/pieces-framework");
const client_1 = require("@notionhq/client");
const models_1 = require("../common/models");
const __1 = require("../..");
const common_1 = require("../common");
exports.createDatabaseItem = (0, pieces_framework_1.createAction)({
    auth: __1.notionAuth,
    name: 'create_database_item',
    displayName: 'Create Database Item',
    description: 'Creates an item in a database.',
    props: {
        database_id: common_1.notionCommon.database_id,
        databaseFields: common_1.notionCommon.databaseFields,
        content: pieces_framework_1.Property.LongText({
            displayName: 'Content',
            description: 'The content you want to append to your item.',
            required: false,
        }),
    },
    run(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const database_id = context.propsValue.database_id;
            const databaseFields = context.propsValue.databaseFields;
            const content = context.propsValue.content;
            const notionFields = {};
            const notion = new client_1.Client({
                auth: context.auth.access_token,
                notionVersion: '2022-02-22',
            });
            const { properties } = yield notion.databases.retrieve({
                database_id: database_id,
            });
            Object.keys(databaseFields).forEach((key) => {
                var _a;
                if (databaseFields[key] !== '') {
                    const fieldType = (_a = properties[key]) === null || _a === void 0 ? void 0 : _a.type;
                    if (fieldType) {
                        notionFields[key] = models_1.NotionFieldMapping[fieldType].buildNotionType(databaseFields[key]);
                    }
                }
            });
            const children = [];
            // Add content to page
            if (content)
                children.push({
                    object: 'block',
                    type: 'paragraph',
                    paragraph: {
                        rich_text: [
                            {
                                type: 'text',
                                text: {
                                    content: content,
                                },
                            },
                        ],
                    },
                });
            return yield notion.pages.create({
                parent: {
                    type: 'database_id',
                    database_id: database_id,
                },
                properties: notionFields,
                children: children,
            });
        });
    },
});
//# sourceMappingURL=create-database-item.js.map