"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findDatabaseItem = void 0;
const tslib_1 = require("tslib");
const __1 = require("../../");
const pieces_framework_1 = require("@activepieces/pieces-framework");
const common_1 = require("../common");
const client_1 = require("@notionhq/client");
exports.findDatabaseItem = (0, pieces_framework_1.createAction)({
    auth: __1.notionAuth,
    name: 'notion-find-database-item',
    displayName: 'Find Database Item',
    description: 'Searches for an item in database by field.',
    props: {
        database_id: common_1.notionCommon.database_id,
        filterDatabaseFields: common_1.notionCommon.filterDatabaseFields,
    },
    run(context) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const databaseId = context.propsValue.database_id;
            const filterFields = context.propsValue.filterDatabaseFields;
            const notion = new client_1.Client({
                auth: context.auth.access_token,
                notionVersion: '2022-02-22',
            });
            const { properties } = yield notion.databases.retrieve({
                database_id: databaseId,
            });
            const filterArray = [];
            for (const fieldKey in filterFields) {
                const fieldValue = filterFields[fieldKey];
                const fieldType = properties[fieldKey].type;
                if (fieldValue === '' || fieldValue === undefined) {
                    continue;
                }
                switch (fieldType) {
                    case 'number':
                        filterArray.push({
                            property: fieldKey,
                            number: { equals: Number(fieldValue) },
                        });
                        break;
                    case 'rich_text':
                        filterArray.push({
                            property: fieldKey,
                            rich_text: { equals: fieldValue },
                        });
                        break;
                    case 'email':
                        filterArray.push({
                            property: fieldKey,
                            email: { equals: fieldValue },
                        });
                        break;
                    case 'select':
                        filterArray.push({
                            property: fieldKey,
                            select: { equals: fieldValue },
                        });
                        break;
                    case 'phone_number':
                        filterArray.push({
                            property: fieldKey,
                            phone_number: { equals: fieldValue },
                        });
                        break;
                    case 'url':
                        filterArray.push({ property: fieldKey, url: { equals: fieldValue } });
                        break;
                    case 'title':
                        filterArray.push({
                            property: fieldKey,
                            title: { equals: fieldValue },
                        });
                        break;
                }
            }
            const { results } = yield notion.databases.query({
                database_id: databaseId,
                filter: {
                    and: filterArray,
                },
            });
            return {
                success: results.length > 0,
                results,
            };
        });
    },
});
//# sourceMappingURL=find-item.js.map