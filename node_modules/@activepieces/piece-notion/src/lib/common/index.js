"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.notionCommon = void 0;
exports.getPages = getPages;
const tslib_1 = require("tslib");
const pieces_framework_1 = require("@activepieces/pieces-framework");
const client_1 = require("@notionhq/client");
const models_1 = require("./models");
exports.notionCommon = {
    baseUrl: 'https://api.notion.com/v1',
    database_id: pieces_framework_1.Property.Dropdown({
        displayName: 'Database',
        required: true,
        description: 'Select the database you want to use',
        refreshers: [],
        options: (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ auth }) {
            if (!auth) {
                return {
                    disabled: true,
                    placeholder: 'Please connect your Notion account first',
                    options: [],
                };
            }
            const notion = new client_1.Client({
                auth: auth.access_token,
                notionVersion: '2022-02-22',
            });
            const databases = yield notion.search({
                filter: {
                    property: 'object',
                    value: 'database',
                },
            });
            return {
                placeholder: 'Select a database',
                options: databases.results
                    .filter((f) => f.title.length > 0)
                    .map((database) => {
                    var _a, _b, _c;
                    return ({
                        label: (_c = (_b = (_a = database.title) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.plain_text) !== null && _c !== void 0 ? _c : 'Unknown title',
                        value: database.id,
                    });
                }),
            };
        }),
    }),
    database_item_id: pieces_framework_1.Property.Dropdown({
        displayName: 'Database Item',
        description: 'Select the item you want to update',
        required: true,
        refreshers: ['database_id'],
        options: (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ auth, database_id }) {
            if (!auth || !database_id) {
                return {
                    disabled: true,
                    placeholder: 'Please connect your Notion account first and select database',
                    options: [],
                };
            }
            const notion = new client_1.Client({
                auth: auth.access_token,
                notionVersion: '2022-02-22',
            });
            const { results } = yield notion.databases.query({
                database_id: database_id,
                filter_properties: ['title'],
            });
            return {
                disabled: false,
                options: results.map((item) => {
                    var _a, _b;
                    const property = Object.values(item.properties)[0];
                    return {
                        label: (_b = (_a = property.title[0]) === null || _a === void 0 ? void 0 : _a.plain_text) !== null && _b !== void 0 ? _b : 'No Title',
                        value: item.id,
                    };
                }),
            };
        }),
    }),
    databaseFields: pieces_framework_1.Property.DynamicProperties({
        displayName: 'Fields',
        required: true,
        refreshers: ['database_id'],
        props: (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ auth, database_id }) {
            if (!auth || !database_id) {
                return {
                    disabled: true,
                    placeholder: 'Please connect your Notion account first and select database',
                    options: [],
                };
            }
            const fields = {};
            try {
                const notion = new client_1.Client({
                    auth: auth.access_token,
                    notionVersion: '2022-02-22',
                });
                const { properties } = yield notion.databases.retrieve({
                    database_id: database_id,
                });
                for (const key in properties) {
                    const property = properties[key];
                    if ([
                        'rollup',
                        'button',
                        'files',
                        'verification',
                        'formula',
                        'unique_id',
                        'relation',
                        'created_by',
                        'created_time',
                        'last_edited_by',
                        'last_edited_time',
                    ].includes(property.type)) {
                        continue;
                    }
                    if (property.type === 'people') {
                        const { results } = yield notion.users.list({ page_size: 100 });
                        fields[property.name] = pieces_framework_1.Property.StaticMultiSelectDropdown({
                            displayName: property.name,
                            required: false,
                            options: {
                                disabled: false,
                                options: results
                                    .filter((user) => user.type === 'person' && user.name !== null)
                                    .map((option) => {
                                    return {
                                        label: option.name,
                                        value: option.id,
                                    };
                                }),
                            },
                        });
                    }
                    else {
                        fields[property.name] =
                            models_1.NotionFieldMapping[property.type].buildActivepieceType(property);
                    }
                }
            }
            catch (e) {
                console.debug(e);
            }
            return fields;
        }),
    }),
    filterDatabaseFields: pieces_framework_1.Property.DynamicProperties({
        displayName: 'Fields',
        required: true,
        refreshers: ['database_id'],
        props: (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ auth, database_id }) {
            if (!auth || !database_id) {
                return {
                    disabled: true,
                    placeholder: 'Please connect your Notion account first and select database',
                    options: [],
                };
            }
            const fields = {};
            try {
                const notion = new client_1.Client({
                    auth: auth.access_token,
                    notionVersion: '2022-02-22',
                });
                const { properties } = yield notion.databases.retrieve({
                    database_id: database_id,
                });
                for (const key in properties) {
                    const property = properties[key];
                    if ([
                        'rollup',
                        'button',
                        'files',
                        'verification',
                        'status',
                        'multi_select',
                        'formula',
                        'unique_id',
                        'relation',
                        'checkbox',
                        'created_by',
                        'created_time',
                        'last_edited_by',
                        'last_edited_time',
                    ].includes(property.type)) {
                        continue;
                    }
                    fields[property.name] =
                        models_1.NotionFieldMapping[property.type].buildActivepieceType(property);
                }
            }
            catch (e) {
                console.debug(e);
            }
            return fields;
        }),
    }),
    page: pieces_framework_1.Property.Dropdown({
        displayName: 'Page',
        required: true,
        description: 'Select the page you want to use. Only your most recently edited 100 pages will appear.',
        refreshers: [],
        options: (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ auth }) {
            if (!auth) {
                return {
                    disabled: true,
                    placeholder: 'Please connect your Notion account first',
                    options: [],
                };
            }
            const pages = yield getPages(auth);
            return {
                placeholder: 'Select a page',
                options: pages.map((page) => {
                    var _a, _b, _c, _d, _e, _f, _g;
                    return ({
                        label: (_g = (_c = (_b = (_a = page.properties.Name) === null || _a === void 0 ? void 0 : _a.title[0]) === null || _b === void 0 ? void 0 : _b.plain_text) !== null && _c !== void 0 ? _c : (_f = (_e = (_d = page.properties.title) === null || _d === void 0 ? void 0 : _d.title[0]) === null || _e === void 0 ? void 0 : _e.text) === null || _f === void 0 ? void 0 : _f.content) !== null && _g !== void 0 ? _g : 'No Title',
                        value: page.id,
                    });
                }),
            };
        }),
    }),
};
function getPages(auth, search, sort) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a, _b;
        const notion = new client_1.Client({
            auth: auth.access_token,
            notionVersion: '2022-02-22',
        });
        let filter = {
            property: 'object',
            value: 'page',
        };
        if (search === null || search === void 0 ? void 0 : search.editedAfter)
            filter = {
                and: [
                    {
                        property: 'object',
                        value: 'page',
                    },
                    {
                        timestamp: 'last_edited_time',
                        last_edited_time: {
                            after: search.editedAfter,
                        },
                    },
                ],
            };
        if (search === null || search === void 0 ? void 0 : search.createdAfter)
            filter = {
                and: [
                    {
                        property: 'object',
                        value: 'page',
                    },
                    {
                        timestamp: 'created_time',
                        created_time: {
                            after: search.createdAfter,
                        },
                    },
                ],
            };
        const sortObj = {
            direction: (_a = sort === null || sort === void 0 ? void 0 : sort.direction) !== null && _a !== void 0 ? _a : 'descending',
            timestamp: (_b = sort === null || sort === void 0 ? void 0 : sort.property) !== null && _b !== void 0 ? _b : 'last_edited_time',
        };
        const pages = yield notion.search({
            filter: filter,
            sort: sortObj,
        });
        return pages.results;
    });
}
//# sourceMappingURL=index.js.map