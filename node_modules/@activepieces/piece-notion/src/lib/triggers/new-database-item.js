"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.newDatabaseItem = void 0;
const tslib_1 = require("tslib");
const pieces_common_1 = require("@activepieces/pieces-common");
const pieces_framework_1 = require("@activepieces/pieces-framework");
const dayjs_1 = tslib_1.__importDefault(require("dayjs"));
const common_1 = require("../common");
const client_1 = require("@notionhq/client");
const __1 = require("../..");
const shared_1 = require("@activepieces/shared");
exports.newDatabaseItem = (0, pieces_framework_1.createTrigger)({
    auth: __1.notionAuth,
    name: 'new_database_item',
    displayName: 'New Database Item',
    description: 'Triggers when an item is added to a database.',
    props: {
        database_id: common_1.notionCommon.database_id,
    },
    sampleData: {
        id: 'd23872cd-c106-4afa-b33d-d3fd66064ccb',
        url: 'https://www.notion.so/Take-Fig-on-a-walk-d23872cdc1064afab33dd3fd66064ccb',
        icon: {
            type: 'emoji',
            emoji: '🐶',
        },
        cover: null,
        object: 'page',
        parent: {
            type: 'database_id',
            database_id: 'fe1eb968-50b6-4d96-83ca-4d19b96f488e',
        },
        archived: false,
        created_by: {
            id: 'f3806fae-a281-4f4e-8563-c816c3e8bd40',
            object: 'user',
        },
        properties: {
            Name: {
                id: 'title',
                type: 'title',
                title: [
                    {
                        href: null,
                        text: {
                            link: null,
                            content: 'Take Fig on a walk',
                        },
                        type: 'text',
                        plain_text: 'Take Fig on a walk',
                        annotations: {
                            bold: false,
                            code: false,
                            color: 'default',
                            italic: false,
                            underline: false,
                            strikethrough: false,
                        },
                    },
                ],
            },
            Status: {
                id: '%5EOE%40',
                type: 'select',
                select: {
                    id: '2',
                    name: 'Doing',
                    color: 'yellow',
                },
            },
            'Date Created': {
                id: "'Y6%3C",
                type: 'created_time',
                created_time: '2023-03-02T01:43:00.000Z',
            },
        },
        created_time: '2023-03-02T01:43:00.000Z',
        last_edited_by: {
            id: 'f3806fae-a281-4f4e-8563-c816c3e8bd40',
            object: 'user',
        },
        last_edited_time: '2023-03-02T01:43:00.000Z',
    },
    type: pieces_framework_1.TriggerStrategy.POLLING,
    test(ctx) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield pieces_common_1.pollingHelper.test(polling, {
                auth: ctx.auth,
                store: ctx.store,
                propsValue: ctx.propsValue,
                files: ctx.files,
            });
        });
    },
    onEnable(ctx) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield pieces_common_1.pollingHelper.onEnable(polling, {
                auth: ctx.auth,
                store: ctx.store,
                propsValue: ctx.propsValue,
            });
        });
    },
    onDisable(ctx) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield pieces_common_1.pollingHelper.onDisable(polling, {
                auth: ctx.auth,
                store: ctx.store,
                propsValue: ctx.propsValue,
            });
        });
    },
    run(ctx) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return yield pieces_common_1.pollingHelper.poll(polling, {
                auth: ctx.auth,
                store: ctx.store,
                propsValue: ctx.propsValue,
                files: ctx.files,
            });
        });
    },
});
const polling = {
    strategy: pieces_common_1.DedupeStrategy.LAST_ITEM,
    items: (_a) => tslib_1.__awaiter(void 0, [_a], void 0, function* ({ auth, propsValue, lastItemId }) {
        const lastItem = lastItemId;
        let lastCreatedDate;
        if (lastItem) {
            const lastUpdatedEpochMS = Number(lastItem.split('|')[1]);
            lastCreatedDate = (0, dayjs_1.default)(lastUpdatedEpochMS).toISOString();
        }
        else {
            lastCreatedDate = lastItem;
        }
        const items = yield getResponse(auth, propsValue.database_id, lastCreatedDate);
        return items.map((item) => {
            const object = item;
            return {
                id: object.id + '|' + (0, dayjs_1.default)(object.created_time).valueOf(),
                data: item,
            };
        });
    }),
};
const getResponse = (authentication, database_id, startDate) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const notion = new client_1.Client({
        auth: authentication.access_token,
        notionVersion: '2022-02-22',
    });
    let cursor;
    let hasMore = true;
    const results = [];
    do {
        const response = yield notion.databases.query({
            start_cursor: cursor,
            database_id,
            filter: startDate == null
                ? undefined
                : {
                    timestamp: 'created_time',
                    created_time: {
                        on_or_after: startDate,
                    },
                },
            sorts: [
                {
                    timestamp: 'created_time',
                    direction: 'descending',
                },
            ],
        });
        hasMore = response.has_more;
        cursor = (_a = response.next_cursor) !== null && _a !== void 0 ? _a : undefined;
        results.push(...response.results);
    } while (hasMore && !(0, shared_1.isNil)(startDate));
    return results;
});
//# sourceMappingURL=new-database-item.js.map