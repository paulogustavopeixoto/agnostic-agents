import { HttpMessageBody, HttpMethod, HttpResponse } from '@activepieces/pieces-common';
export declare const githubCommon: {
    baseUrl: string;
    repositoryDropdown: import("@activepieces/pieces-framework").DropdownProperty<{
        repo: string;
        owner: string;
    }, false> | import("@activepieces/pieces-framework").DropdownProperty<{
        repo: string;
        owner: string;
    }, true>;
    assigneeDropDown: (required?: boolean) => import("@activepieces/pieces-framework").MultiSelectDropdownProperty<string, false> | import("@activepieces/pieces-framework").MultiSelectDropdownProperty<string, true>;
    labelDropDown: (required?: boolean) => import("@activepieces/pieces-framework").MultiSelectDropdownProperty<string, false> | import("@activepieces/pieces-framework").MultiSelectDropdownProperty<string, true>;
};
export interface RepositoryProp {
    repo: string;
    owner: string;
}
export type RequestParams = Record<string, string | number | string[] | undefined>;
export type GithubApiCallParams = {
    accessToken: string;
    method: HttpMethod;
    resourceUri: string;
    query?: RequestParams;
    body?: any;
};
export declare function githubApiCall<T extends HttpMessageBody>({ accessToken, method, resourceUri, query, body, }: GithubApiCallParams): Promise<HttpResponse<T>>;
export declare function githubPaginatedApiCall<T extends HttpMessageBody>({ accessToken, method, resourceUri, query, body, }: GithubApiCallParams): Promise<T[]>;
