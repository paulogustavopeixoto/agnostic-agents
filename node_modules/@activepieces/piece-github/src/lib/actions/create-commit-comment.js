"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.githubCreateCommitCommentAction = void 0;
const tslib_1 = require("tslib");
const index_1 = require("../../index");
const pieces_framework_1 = require("@activepieces/pieces-framework");
const common_1 = require("../common");
const pieces_common_1 = require("@activepieces/pieces-common");
exports.githubCreateCommitCommentAction = (0, pieces_framework_1.createAction)({
    auth: index_1.githubAuth,
    name: 'github_create_commit_comment',
    displayName: 'Create Commit Comment',
    description: 'Creates a comment on a commit in a GitHub repository',
    props: {
        repository: common_1.githubCommon.repositoryDropdown,
        sha: pieces_framework_1.Property.ShortText({
            displayName: 'Commit SHA',
            description: 'The SHA of the commit to comment on',
            required: true,
        }),
        body: pieces_framework_1.Property.LongText({
            displayName: 'Comment Body',
            description: 'The content of the comment',
            required: true,
        }),
        path: pieces_framework_1.Property.ShortText({
            displayName: 'File Path',
            description: 'The relative path to the file to comment on (optional)',
            required: false,
        }),
        position: pieces_framework_1.Property.Number({
            displayName: 'Position',
            description: 'The line index in the diff to comment on (optional)',
            required: false,
        }),
    },
    run(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ auth, propsValue }) {
            const { sha, body, path, position } = propsValue;
            const { owner, repo } = propsValue.repository;
            const commentData = {
                body,
            };
            if (path) {
                commentData.path = path;
            }
            if (position !== undefined) {
                commentData.position = position;
            }
            const response = yield (0, common_1.githubApiCall)({
                accessToken: auth.access_token,
                method: pieces_common_1.HttpMethod.POST,
                resourceUri: `/repos/${owner}/${repo}/commits/${sha}/comments`,
                body: commentData,
            });
            return response;
        });
    },
});
//# sourceMappingURL=create-commit-comment.js.map