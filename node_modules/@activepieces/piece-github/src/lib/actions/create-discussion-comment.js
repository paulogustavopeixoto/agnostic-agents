"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.githubCreateDiscussionCommentAction = void 0;
const tslib_1 = require("tslib");
const index_1 = require("../../index");
const pieces_framework_1 = require("@activepieces/pieces-framework");
const common_1 = require("../common");
const pieces_common_1 = require("@activepieces/pieces-common");
exports.githubCreateDiscussionCommentAction = (0, pieces_framework_1.createAction)({
    auth: index_1.githubAuth,
    name: 'github_create_discussion_comment',
    displayName: 'Create Discussion Comment',
    description: 'Creates a comment on a discussion in a GitHub repository',
    props: {
        repository: common_1.githubCommon.repositoryDropdown,
        discussion_number: pieces_framework_1.Property.Number({
            displayName: 'Discussion Number',
            description: 'The number of the discussion to comment on',
            required: true,
        }),
        body: pieces_framework_1.Property.LongText({
            displayName: 'Comment Body',
            description: 'The content of the comment (supports markdown)',
            required: true,
        }),
    },
    run(_a) {
        return tslib_1.__awaiter(this, arguments, void 0, function* ({ auth, propsValue }) {
            const { discussion_number, body } = propsValue;
            const { owner, repo } = propsValue.repository;
            // GitHub Discussions API requires GraphQL for most operations
            const query = `
		mutation AddDiscussionComment {
			addDiscussionComment(input: {
				discussionId: "${discussion_number}",
				repositoryName: "${repo}",
				repositoryOwner: "${owner}",
				body: "${body.replace(/"/g, '\\"')}"
			}) {
				comment {
					id
					body
					createdAt
					url
				}
			}
		}`;
            const response = yield (0, common_1.githubApiCall)({
                accessToken: auth.access_token,
                method: pieces_common_1.HttpMethod.POST,
                resourceUri: '/graphql',
                body: {
                    query,
                },
            });
            return response;
        });
    },
});
//# sourceMappingURL=create-discussion-comment.js.map